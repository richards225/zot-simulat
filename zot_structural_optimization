import numpy as np

def locksmith_update(mask, values, prev_values, theta=0.01):
    changes = np.abs(values - prev_values)
    delta = np.mean(changes)
    if delta < theta:
        mask[changes < theta] = False
    return mask

def zot_structural_optimization(n=10000, iterations=200, theta=0.01):
    positions = np.linspace(0, 1, n)
    stresses = np.random.rand(n)
    mask = np.ones(n, dtype=bool)
    prev_stresses = stresses.copy()
    for it in range(iterations):
        if it % 10 == 0:  # Atualiza mÃ¡scara periodicamente
            mask = locksmith_update(mask, stresses, prev_stresses, theta)
            prev_stresses = stresses.copy()
        masked_stresses = stresses[mask]
        if len(masked_stresses) == 0:
            break
        gradients_masked = np.diff(masked_stresses, prepend=0)
        masked_stresses -= 0.01 * gradients_masked[:len(masked_stresses)]
        stresses[mask] = masked_stresses
    return stresses
